%%%-------------------------------------------------------------------
%%% @author Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%% @copyright (C) 2013, Evgeniy Khramtsov
%%% @doc
%%%
%%% @end
%%% Created :  1 May 2013 by Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%%-------------------------------------------------------------------

{require_min_otp_vsn, "16"}.

Cfg = case file:consult("vars.config") of
          {ok, Terms} ->
              Terms;
          _Err ->
              []
      end,

Macros = lists:flatmap(
           fun({roster_gateway_workaround, true}) ->
                   [{d, 'ROSTER_GATEWAY_WORKAROUND'}];
              ({flash_hack, true}) ->
                   [{d, 'ENABLE_FLASH_HACK'}];
              ({nif, true}) ->
                   [{d, 'NIF'}];
              ({db_type, mssql}) ->
                   [{d, 'mssql'}];
              ({lager, true}) ->
                   [{d, 'LAGER'}];
              ({p1db, true}) ->
                   [{d, 'p1db'}];
              ({licence, {0,0,0}}) ->
                   [];
              ({licence, {Y,M,D}}) ->
                   Secs = calendar:datetime_to_gregorian_seconds({{Y,M,D},{23,59,00}})-62167219200,
                   Val = ((Secs div 1000000) bsl 1) + ((Secs rem 1000000) bsr 19),
                   [{d, 'VALIDITY', Val}];
              ({erlang_deprecated_types, true}) ->
                   [{d, 'ERL_DEPRECATED_TYPES'}];
              (_) ->
                   []
           end, Cfg),

DebugInfo = case lists:keysearch(debug, 1, Cfg) of
                {value, {debug, true}} ->
                    [];
                {value, {debug, Key}} ->
                    [{debug_info_key, Key}];
                _ ->
                    [no_debug_info]
            end,

HiPE = case lists:keysearch(hipe, 1, Cfg) of
           {value, {hipe, true}} ->
               [native];
           _ ->
               []
       end,

SrcDirs = lists:foldl(
            fun({pubsub_ng, true}, Acc) ->
                    [mod_pubsub_ng|Acc];
               ({tools, true}, Acc) ->
                    [tools|Acc];
               (_, Acc) ->
                    Acc
            end, [], Cfg),

Deps = [{cache_tab, ".*", {git, "git://github.com/processone/cache_tab", {tag, "1.0.1"}}},
        {p1_tls, ".*", {git, "ssh://git@git.process-one.net:7999/ebe/p1_tls.git"}},
        {p1_stringprep, ".*", {git, "git://github.com/processone/stringprep"}},
        {p1_xml, ".*", {git, "https://github.com/processone/xml"}},
        {esip, ".*", {git, "git://github.com/processone/p1_sip"}},
        {p1_stun, ".*", {git, "git://github.com/processone/stun"}},
        {p1_yaml, ".*", {git, "git://github.com/processone/p1_yaml"}},
        {ehyperloglog, ".*", {git, "https://github.com/vaxelfel/eHyperLogLog.git"}},
        {statsderl, ".*", {git, "https://github.com/lpgauth/statsderl.git"}},
        {p1_utils, ".*", {git, "git://github.com/processone/p1_utils"}},
        {jiffy, ".*", {git, "git://github.com/davisp/jiffy"}},
        {oauth2, ".*", {git, "https://github.com/prefiks/oauth2.git"}},
        {xmlrpc, ".*", {git, "git://github.com/rds13/xmlrpc"}}],

CFLags = proplists:get_value(cflags, Cfg, ""),
CPPFLags = proplists:get_value(cppflags, Cfg, ""),
LDFLags = proplists:get_value(ldflags, Cfg, ""),

ConfigureCmd = fun(Pkg, Flags) ->
                       {'get-deps',
                        "sh -c 'cd deps/" ++ Pkg ++
                            " && CFLAGS=\""++ CFLags ++"\" CPPFLAGS=\""++ CPPFLags ++"\" LDFLAGS=\""++ LDFLags ++"\"" ++
                            " ./configure" ++ Flags ++ "'"}
               end,

XMLFlags = lists:foldl(
             fun({nif, true}, Acc) ->
                     Acc ++ " --enable-nif";
                ({full_xml, true}, Acc) ->
                     Acc ++ " --enable-full-xml";
                ({flash_hack, true}, Acc) ->
                     Acc ++ " --enable-flash-hack";
                (_, Acc) ->
                     Acc
             end, "", Cfg),

PostHooks = [ConfigureCmd("p1_tls", ""),
             ConfigureCmd("p1_stringprep", ""),
             ConfigureCmd("p1_yaml", ""),
             ConfigureCmd("esip", ""),
             ConfigureCmd("p1_xml", XMLFlags)],

CfgDeps = lists:flatmap(
            fun({mysql, true}) ->
                    [{p1_mysql, ".*", {git, "git://github.com/processone/mysql"}}];
               ({pgsql, true}) ->
                    [{p1_pgsql, ".*", {git, "git://github.com/processone/pgsql"}}];
               ({sqlite, true}) ->
                    [{sqlite3, ".*", {git, "git://github.com/alexeyr/erlang-sqlite3"}}];
               ({pam, true}) ->
                    [{p1_pam, ".*", {git, "git://github.com/processone/epam"}}];
               ({zlib, true}) ->
                    [{p1_zlib, ".*", {git, "git://github.com/processone/zlib"}}];
               ({riak, true}) ->
		    [{riakc, ".*", {git, "git://github.com/basho/riak-erlang-client"}}];
               ({elixir, true}) ->
                    [{rebar_elixir_plugin, ".*", {git, "git@github.com:processone/rebar_elixir_plugin.git"}},
                     {elixir, ".*", {git, "git://github.com/elixir-lang/elixir", {branch, "v1.0"}}}];
               ({iconv, true}) ->
                    [{p1_iconv, ".*", {git, "git://github.com/processone/eiconv"}}];
               ({http, true}) ->
                    [{lhttpc, ".*", {git, "https://github.com/processone/lhttpc.git"}}];
               ({lager, true}) ->
                    [{lager, ".*", {git, "git://github.com/basho/lager", {tag, "3.0.0"}}},
		     {lager_syslog, ".*", {git, "git://github.com/basho/lager_syslog"}}];
               ({lager, false}) ->
                    [{p1_logger, ".*", {git, "git://github.com/processone/p1_logger"}}];
               ({airbrake, true}) ->
                    [{erlbrake, ".*", {git, "git://github.com/kenpratt/erlbrake"}}];
               ({p1db, true}) ->
                    [{p1db, ".*", {git, "ssh://git@git.process-one.net:7999/ebe/p1db.git"}}];
               ({tools, true}) ->
                    [{meck, "0.8.2", {git, "https://github.com/eproxus/meck", {tag, "0.8.2"}}},
		     {moka, ".*", {git , "git://github.com/processone/moka.git"}}];
               ({redis, true}) ->
                    [{eredis, ".*", {git, "git://github.com/wooga/eredis"}}];
               (_) ->
                    []
            end, Cfg),

CfgPostHooks = lists:flatmap(
                 fun({pam, true}) ->
                         [ConfigureCmd("p1_pam", "")];
                    ({zlib, true}) ->
                         [ConfigureCmd("p1_zlib", "")];
                    ({iconv, true}) ->
                         [ConfigureCmd("p1_iconv", "")];
                    (_) ->
                         []
                 end, Cfg),

CfgXrefs = lists:flatmap(
             fun({mysql, false}) ->
                     ["(\".*mysql.*\":_/_)"];
                ({pgsql, false}) ->
                     ["(\".*pgsql.*\":_/_)"];
                ({pam, false}) ->
                     ["(\"epam\":_/_)"];
                ({riak, false}) ->
                     ["(\"riak.*\":_/_)"];
                ({riak, true}) ->
                     % used in map-reduce function called from riak vm
                     ["(\"riak_object\":_/_)"];
                ({p1db, false}) ->
                     ["(\"p1db.*\":_/_)"];
                ({zlib, false}) ->
                     ["(\"ezlib\":_/_)"];
                ({http, false}) ->
                     ["(\"lhttpc\":_/_)"];
                ({iconv, false}) ->
                     ["(\"iconv\":_/_)"];
                ({odbc, false}) ->
                     ["(\"odbc\":_/_)"];
                ({sqlite, false}) ->
                     ["(\"sqlite3\":_/_)"];
                ({redis, false}) ->
                     ["(\"eredis\":_/_)"];
                (_) ->
                     []
            end, Cfg),

ElixirConfig = case lists:keysearch(elixir, 1, Cfg) of
                   {value, {elixir, true}} ->
                       [{plugins, [deps_erl_opts, rebar_elixir_compiler, rebar_exunit] },
                        {lib_dirs, ["deps/elixir/lib"]},
			{src_dirs, ["include"]}];
                   _ ->
                       [{plugins, [deps_erl_opts]}]
               end,

{ok, Cwd} = file:get_cwd(),

TestConfigFile = filename:join([Cwd, "test", "config.ctc"]),
TestConfig = case file:read_file_info(TestConfigFile) of
                 {ok, _} ->
                     "-userconfig ct_config_plain " ++ TestConfigFile ++ " ";
                 _ ->
                     ""
             end,

AllDeps0 = Deps ++ CfgDeps,
AllDeps = case lists:keytake(lager, 1, AllDeps0) of
		{value, Tuple, Rest} -> [Tuple|Rest];
		false -> AllDeps0
	  end,

CompileOpts = [nowarn_deprecated_function],

Config = [{erl_opts, CompileOpts ++ Macros ++ HiPE ++ DebugInfo ++
               [{src_dirs, [asn1, src | SrcDirs]}]},
          {deps_erl_opts, HiPE},
          {sub_dirs, ["rel"]},
          {keep_build_info, true},
          {ct_extra_params, "-ct_hooks cth_surefire "
           ++ TestConfig
           ++ "-include "
           ++ filename:join([Cwd, "tools"])},
          {xref_warnings, false},
          {xref_checks, [deprecated_function_calls]},
          {xref_queries,
           [{"(XC - UC) || (XU - X - B - "
             ++ string:join(["(\"gen_transport\":_/_) - (\"eprof\":_/_)"]
                            ++ CfgXrefs, " - ") ++ ")", []}]},
          {eunit_compile_opts, [{i, "tools"}]},
          {post_hooks, PostHooks ++ CfgPostHooks},
          {port_env, [{"CFLAGS", "-g -O2 -Wall"}]},
          {port_specs, [{"priv/lib/jid.so", ["c_src/jid.c"]}]},
          {deps, AllDeps}] ++ ElixirConfig,
%io:format("ejabberd configuration:~n  ~p~n", [Config]),
Config.

%% Local Variables:
%% mode: erlang
%% End:
%% vim: set filetype=erlang tabstop=8:
