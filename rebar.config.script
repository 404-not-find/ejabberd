%%%-------------------------------------------------------------------
%%% @author Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%% @copyright (C) 2013, Evgeniy Khramtsov
%%% @doc
%%%
%%% @end
%%% Created :  1 May 2013 by Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%%-------------------------------------------------------------------
Cfg = case file:consult("vars.config") of
          {ok, Terms} ->
              Terms;
          _Err ->
              []
      end,

Macros = lists:flatmap(
           fun({roster_gateway_workaround, true}) ->
                   [{d, 'ROSTER_GATEWAY_WORKAROUND'}];
              ({flash_hack, true}) ->
                   [{d, 'ENABLE_FLASH_HACK'}];
              ({transient_supervisors, true}) ->
                   [{d, 'NO_TRANSIENT_SUPERVISORS'}];
              ({nif, true}) ->
                   [{d, 'NIF'}];
              ({db_type, mssql}) ->
                   [{d, 'mssql'}];
              ({lager, true}) ->
                   [{d, 'LAGER'}];
              ({p1db, true}) ->
                   [{d, 'p1db'}];
              ({licence, {0,0,0}}) ->
                   [];
              ({licence, {Y,M,D}}) ->
                   Secs = calendar:datetime_to_gregorian_seconds({{Y,M,D},{23,59,00}})-62167219200,
                   Val = ((Secs div 1000000) bsl 1) + ((Secs rem 1000000) bsr 19),
                   [{d, 'VALIDITY', Val}];
              ({erlang_deprecated_types, true}) ->
                   [{d, 'ERL_DEPRECATED_TYPES'}];
              (_) ->
                   []
           end, Cfg),

DebugInfo = case lists:keysearch(debug, 1, Cfg) of
                {value, {debug, true}} ->
                    [];
                _ ->
                    [no_debug_info]
            end,

HiPE = case lists:keysearch(hipe, 1, Cfg) of
           {value, {hipe, true}} ->
               [native];
           _ ->
               []
       end,

SrcDirs = lists:foldl(
            fun({pubsub_ng, true}, Acc) ->
                    [mod_pubsub_ng|Acc];
               ({tools, true}, Acc) ->
                    [tools|Acc];
               (_, Acc) ->
                    Acc
            end, [], Cfg),

Deps = [{p1_cache_tab, ".*", {git, "git://github.com/processone/cache_tab"}},
        {p1_tls, ".*", {git, "git://github.com/processone/tls"}},
        {p1_stringprep, ".*", {git, "git://github.com/processone/stringprep"}},
        {p1_xml, ".*", {git, "ssh://git@git.process-one.net:7999/ebe/xml_priv.git"}},
	{esip, ".*", {git, "git://github.com/processone/p1_sip"}},
	{p1_stun, ".*", {git, "git://github.com/processone/stun"}},
        {p1_yaml, ".*", {git, "git://github.com/processone/p1_yaml"}},
        {ehyperloglog, ".*", {git, "https://github.com/vaxelfel/eHyperLogLog.git"}},
        {statsderl, ".*", {git, "https://github.com/lpgauth/statsderl.git"}},
        {p1_utils, ".*", {git, "git://github.com/processone/p1_utils"}}],
ConfigureCmd = fun(Pkg, Flags) ->
                       {'get-deps',
                        "sh -c 'cd deps/" ++ Pkg ++
                            " && ./configure" ++ Flags ++ "'"}
               end,

XMLFlags = lists:foldl(
             fun({nif, true}, Acc) ->
                     Acc ++ " --enable-nif";
                ({full_xml, true}, Acc) ->
                     Acc ++ " --enable-full-xml";
                ({flash_hack, true}, Acc) ->
                     Acc ++ " --enable-flash-hack";
                (_, Acc) ->
                     Acc
             end, "", Cfg),

PostHooks = [ConfigureCmd("p1_tls", ""),
             ConfigureCmd("p1_stringprep", ""),
             ConfigureCmd("p1_yaml", ""),
	     ConfigureCmd("esip", ""),
             ConfigureCmd("p1_xml", XMLFlags)],

CfgDeps = lists:flatmap(
            fun({mysql, true}) ->
                    [{p1_mysql, ".*", {git, "git://github.com/processone/mysql"}}];
               ({pgsql, true}) ->
                    [{p1_pgsql, ".*", {git, "git://github.com/processone/pgsql"}}];
               ({pam, true}) ->
                    [{p1_pam, ".*", {git, "git://github.com/processone/epam"}}];
               ({zlib, true}) ->
                    [{p1_zlib, ".*", {git, "git://github.com/processone/zlib"}}];
               ({riak, true}) ->
                    [{riakc, ".*",
		      {git, "git://github.com/basho/riak-erlang-client",
		       {tag, "1.4.2"}}}];
               ({json, true}) ->
                    [{jiffy, ".*", {git, "git://github.com/davisp/jiffy"}}];
               ({iconv, true}) ->
                    [{p1_iconv, ".*", {git, "git://github.com/processone/eiconv"}}];
               ({http, true}) ->
                    [{lhttpc, ".*", {git, "https://github.com/processone/lhttpc.git"}}];
               ({lager, true}) ->
                    [{lager, ".*", {git, "git://github.com/basho/lager"}}];
               ({lager, false}) ->
                    [{p1_logger, ".*", {git, "git://github.com/processone/p1_logger"}}];
               ({airbrake, true}) ->
                    [{erlbrake, ".*", {git, "git://github.com/kenpratt/erlbrake"}}];
               ({p1db, true}) ->
                    [{p1db, ".*", {git, "git@github.com:processone/p1db"}}];
               (_) ->
                    []
            end, Cfg),

CfgPostHooks = lists:flatmap(
                 fun({pam, true}) ->
                         [ConfigureCmd("p1_pam", "")];
                    ({zlib, true}) ->
                         [ConfigureCmd("p1_zlib", "")];
                    ({iconv, true}) ->
                         [ConfigureCmd("p1_iconv", "")];
                    (_) ->
                         []
                 end, Cfg),

CfgXrefs = lists:flatmap(
	     fun({mysql, false}) ->
		     ["(\".*mysql.*\":_/_)"];
		({pgsql, false}) ->
		     ["(\".*pgsql.*\":_/_)"];
		({pam, false}) ->
		     ["(\"epam\":_/_)"];
		({riak, false}) ->
		     ["(\"riak.*\":_/_)"];
		({riak, true}) ->
		     % used in map-reduce function called from riak vm
		     ["(\"riak_object\":_/_)"];
		({json, false}) ->
		    ["(\"jiffy\":_/_)"];
		({p1db, false}) ->
		     ["(\"p1db.*\":_/_)"];
		({zlib, false}) ->
		     ["(\"ezlib\":_/_)"];
		({http, false}) ->
		     ["(\"lhttpc\":_/_)"];
		({iconv, false}) ->
		     ["(\"iconv\":_/_)"];
		({odbc, false}) ->
		     ["(\"odbc\":_/_)"];
		(_) ->
		     []
            end, Cfg),


{ok, Cwd} = file:get_cwd(),

TestConfigFile = filename:join([Cwd, "test", "config.ctc"]),
TestConfig = case file:read_file_info(TestConfigFile) of
                 {ok, _} ->
                     "-userconfig ct_config_plain " ++ TestConfigFile ++ " ";
                 _ ->
                     ""
             end,

Config = [{erl_opts, Macros ++ HiPE ++ DebugInfo ++
               [{src_dirs, [asn1, src | SrcDirs]}]},
          {sub_dirs, ["rel"]},
          {keep_build_info, true},
          {ct_extra_params, "-ct_hooks cth_surefire "
           ++ TestConfig
           ++ "-include "
           ++ filename:join([Cwd, "tools"])},
	  {xref_warnings, false},
          {xref_checks, []},
	  {xref_queries,
	   [{"(XC - UC) || (XU - X - B - "
	     ++ string:join(["(\"gen_transport\":_/_) - (\"eprof\":_/_)"]
			    ++ CfgXrefs, " - ") ++ ")", []}]},
          {eunit_compile_opts, [{i, "tools"}]},
          {post_hooks, PostHooks ++ CfgPostHooks},
          {port_env, [{"CFLAGS", "-g -O2 -Wall"}]},
          {port_specs, [{"priv/lib/jlib.so", ["c_src/jlib.c"]}]},
          {deps, Deps ++ CfgDeps}],
%io:format("ejabberd configuration:~n  ~p~n", [Config]),
Config.

%% Local Variables:
%% mode: erlang
%% End:
%% vim: set filetype=erlang tabstop=8:
